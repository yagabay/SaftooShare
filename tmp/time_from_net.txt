//
//
//public static Long getTime(Context context) {
//    Long time = null;
//    RequestQueue queue = Volley.newRequestQueue(context);
//    String url = "http://www.timeapi.org/utc/now";
//
//    StringRequest stringRequest = new StringRequest(GET, url,
//            new com.android.volley.Response.Listener<String>() {
//                @Override
//                public void onResponse(String response) {
//                    try {
//                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
//                        simpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
//                        Date date = simpleDateFormat.parse(response);
//
//                        TimeZone tz = TimeZone.getTimeZone("Israel");
//                        SimpleDateFormat destFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//                        destFormat.setTimeZone(tz);
//
//                        String result = destFormat.format(date);
//
//                        Log.d(TAG, "onResponse: " + result.toString());
//                    } catch (ParseException e) {
//                        e.printStackTrace();
//                    }
//                }
//            }, new com.android.volley.Response.ErrorListener() {
//        @Override
//        public void onErrorResponse(VolleyError error) {
//            Log.w(TAG, "onErrorResponse: " + error.getMessage());
//        }
//    });
//    queue.add(stringRequest);
//    return time;
//}





//    public static Date getTime() {
//        try {
//            TimeTCPClient client = new TimeTCPClient();
//            try {
//                // Set timeout of 60 seconds
//                client.setDefaultTimeout(60000);
//                // Connecting to time server
//                // Other time servers can be found at : http://tf.nist.gov/tf-cgi/servers.cgi#
//                // Make sure that your program NEVER queries a server more frequently than once every 4 seconds
//                client.connect("time.nist.gov");
//                System.out.println(client.getDate());
//            } finally {
//                client.disconnect();
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }

//    public static String getTime() {
//        try{
//            //Make the Http connection so we can retrieve the time
//            HttpClient httpclient = new DefaultHttpClient();
//            // I am using yahoos api to get the time
//            HttpResponse response;
//            response  = httpclient.execute(new
//                    HttpGet("http://developer.yahooapis.com/TimeService/V1/getTime?appid=YahooDemo"));
//            StatusLine statusLine = response.getStatusLine();
//            if(statusLine.getStatusCode() == HttpStatus.SC_OK){
//                ByteArrayOutputStream out = new ByteArrayOutputStream();
//                response.getEntity().writeTo(out);
//                out.close();
//                // The response is an xml file and i have stored it in a string
//                String responseString = out.toString();
//                Log.d("Response", responseString);
//                //We have to parse the xml file using any parser, but since i have to
//                //take just one value i have deviced a shortcut to retrieve it
//                int x = responseString.indexOf("<Timestamp>");
//                int y = responseString.indexOf("</Timestamp>");
//                //I am using the x + "<Timestamp>" because x alone gives only the start value
//                Log.d("Response", responseString.substring(x + "<Timestamp>".length(),y) );
//                String timestamp =  responseString.substring(x + "<Timestamp>".length(),y);
//                // The time returned is in UNIX format so i need to multiply it by 1000 to use it
//                Date d = new Date(Long.parseLong(timestamp) * 1000);
//                Log.d("Response", d.toString() );
//                return d.toString() ;
//            } else{
//                //Closes the connection.
//                response.getEntity().getContent().close();
//                throw new IOException(statusLine.getReasonPhrase());
//            }
//        }catch (ClientProtocolException e) {
//            Log.d("Response", e.getMessage());
//        }catch (IOException e) {
//            Log.d("Response", e.getMessage());
//        }
//        return null;
//    }
